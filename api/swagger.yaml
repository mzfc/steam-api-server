---
swagger: "2.0"
info:
  description: "This is STeam API"
  version: "1.0.0"
  title: "STeam API"
  contact:
    email: "lovelywib@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "virtserver.swaggerhub.com"
basePath: "/mattshen/steamapi/1.0.0"
tags:
- name: "admins"
  description: "Secured Admin-only calls"
- name: "developers"
  description: "Operations available to regular developers"
- name: "users"
  description: "Operations available to regular users"
schemes:
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- basicAuth: []

paths:
  /users:
    x-swagger-router-controller: "users"
    get:
      tags:
      - "users"
      summary: "search users"
      description: "By passing in the appropirate options, you can search for\navailable\
        \ users in the system\n"
      operationId: "searchUsers"
      produces:
      - "application/json"
      parameters:
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up users"
        required: false
        type: "string"
      - name: "teamId"
        in: "query"
        description: "passing teamId to get members of the teams"
        required: false
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "bad input parameter"
      security:
      - users_auth:
        - "write:users"
        - "read:users"
    post:
      tags:
      - "users"
      summary: "create a new user"
      description: ""
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that needs to be created"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        405:
          description: "Invalid input"
          
  /users/{id}:
    x-swagger-router-controller: "users"
    get:
      tags:
      - "users"
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "getUserById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"
    patch:
      tags:
      - "users"
      summary: "Patch user by ID"
      description: "Patches a single user"
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of user to patch"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "user object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "user not found"
    delete:
      tags:
      - "users"
      summary: Delete user by ID
      description: Delete a single user
      operationId: deleteUserById
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: Id of user to delete
        required: true
        type: "string"
      responses:
        200:
          description: OK
        400:
          description: "Invalid ID supplied"
        404:
          description: "User not found"          

  /teams:
    x-swagger-router-controller: "teams"
    get:
      tags:
      - "users"
      summary: "search teams"
      description: "By passing in the appropirate options, you can search for\navailable\
        \ teams in the system\n"
      operationId: "searchTeams"
      produces:
      - "application/json"
      parameters:
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up teams"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 30.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Team"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "users"
      summary: "create a new team"
      description: ""
      operationId: "createTeam"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "team object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        405:
          description: "Invalid input"
  /teams/{id}:
    x-swagger-router-controller: "teams"
    get:
      tags:
      - "users"
      summary: "Find team by ID"
      description: "Returns a single team"
      operationId: "getTeamById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of team to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Team not found"
    patch:
      tags:
      - "users"
      summary: "Patch team by ID"
      description: "Patches a single user"
      operationId: "updateTeam"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of team to patch"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Team object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Team"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Team"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Team not found"
    delete:
      tags:
      - "users"
      summary: Delete team by ID
      description: Delete a single team
      operationId: deleteTeamById
      parameters:
      - name: id
        in: path
        description: Id of team to delete
        required: true
        type: "string"
      responses:
        200:
          description: OK
        400:
          description: "Invalid ID supplied"
        404:
          description: "Team not found"
          
  /tasks:
    x-swagger-router-controller: "tasks"
    get:
      tags:
      - "users"
      summary: "search tasks"
      description: "By passing in the appropirate options, you can search for\navailable\
        \ tasks in the system\n"
      operationId: "searchTasks"
      parameters:
      - name: "searchString"
        in: "query"
        description: "pass an optional search string for looking up tasks"
        required: false
        type: "string"
      - name: "skip"
        in: "query"
        description: "number of records to skip for pagination"
        required: false
        type: "integer"
        minimum: 0
        format: "int32"
      - name: "limit"
        in: "query"
        description: "maximum number of records to return"
        required: false
        type: "integer"
        maximum: 30.0
        minimum: 0
        format: "int32"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
        400:
          description: "bad input parameter"
    post:
      tags:
      - "users"
      summary: "create a new Task"
      description: ""
      operationId: "createTask"
      parameters:
      - in: "body"
        name: "body"
        description: "task object that needs to be added to the system"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
        405:
          description: "Invalid input"
  /tasks/{id}:
    x-swagger-router-controller: "tasks"
    get:
      tags:
      - "users"
      summary: "Find task by ID"
      description: "Returns a single task"
      operationId: "getTaskById"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of task to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
    patch:
      tags:
      - "users"
      summary: "Patch task by ID"
      description: "Patches a single user"
      operationId: "updateTask"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of task to patch"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "task object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Task"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
    delete:
      tags:
      - "users"
      summary: Delete task by ID
      description: Delete a single team
      operationId: deleteTaskById
      parameters:
      - name: id
        in: path
        description: Id of task to delete
        required: true
        type: "string"
      responses:
        200:
          description: OK
        400:
          description: "Invalid ID supplied"
        404:
          description: "Task not found"
    
securityDefinitions:
  users_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:users: "users can write"
      read:users: "users can read"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  basicAuth:
    type: "basic"
    
definitions:
  User:
    type: "object"
    required:
    - "email"
    - "name"
    - "password"
    properties:
      id:
        type: "string"
        readOnly: true
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      email:
        type: "string"
        example: "someone@somesite.com"
      name:
        type: "string"
        example: "Matt Shen"
      password:
        type: "string"
        example: "xyz"
  Team:
    type: "object"
    required:
    - "name"
    - "createdBy"
    properties:
      id:
        type: "string"
        readOnly: true
        example: "59153f39394d1250dc23f60b"
      name:
        type: "string"
        example: "Excellent Smart Team X"
      createdOn:
        type: "string"
        format: "date-time"
        example: "2016-08-29T09:12:33.001Z"
      createdBy:
        type: "string"
        format: "uuid"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
  Task:
    type: "object"
    required:
    - "teamId"
    - "points"
    - "subject"
    properties:
      id:
        type: "string"
        readOnly: true
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      subject:
        type: "string"
        example: "Clean the kitchen"
      description:
        type: "string"
        example: "* Put dishes into the dishwasher\n* Clean the dininng table\n* Take\
          \ the rubbish to the rubbish bin outside\n"
      points:
        type: "integer"
        format: "int32"
        example: 2
      createdBy:
        type: "string"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      createdOn:
        type: "string"
        format: "date-time"
        example: "2016-08-29T09:12:33.001Z"
      teamId:
        type: "string"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
  Comment:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
        readOnly: true
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      content:
        type: "string"
        example: "Well done"
      createdBy:
        type: "string"
        format: "uuid"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      createdOn:
        type: "string"
        format: "date-time"
        example: "2016-08-29T09:12:33.001Z"
      forTask:
        type: "string"
        format: "uuid"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"

responses:
  UnauthorizedError:
    description: "Authentication information is missing or invalid"
    headers:
      WWW_Authenticate:
        type: "string"